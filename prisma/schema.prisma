// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
  uid     String  @default(uuid()) @unique
  email   String  @unique 
  password String
  jsontoken String?  @default("need token")
  restPasswordTocken String? 
  restPasswordExpire DateTime? 
  createdAt DateTime @default(now())
}
model Profile{
  id String @unique @default(uuid())
  firstName String? @default("add a firstname")
  lastName String? @default("add a lastname")
  userid String @unique 
  profilepic String @default("file/defaultImage.jpg") 
  mobileNumber String? @unique
  description  String? @default("provide description")
  tagDescription String? @default("provide short description")
  skills  Skill[] 
  companys UserCompany[]
  usereducation UserEducation[] 
}

model UserEducation{
   id BigInt @unique @default(autoincrement()) 
   profileid String
   course String
   institutionid String 
   description String? @default("add description ")
   startDate DateTime?
   endDate   DateTime? 
   persentage String?  @default("add your percentage")
   useredu Profile @relation(fields: [profileid],references: [id])
  }
model Institution{
  id String @default(uuid()) @unique 
  name String
  createdAt DateTime @default(now())
  instituteId String @unique 
  description String? @default("add description ")
  addressid String? @default("add address")
  pageid String? @default("add a page")
}  

model UserCompany{
   id BigInt @unique @default(autoincrement()) 
   profileid String
   position String
   companyid String 
   description String? @default("add description")
   startDate DateTime?
   endDate   DateTime? 
   Domain    String? @default("please provide Domain")
   usercompany Profile @relation(fields: [profileid],references: [id])
  }

  model Company{
    id BigInt @default(autoincrement()) @unique
    name String
    createdAt DateTime @default(now())
    companyid String @unique 
    description String? @default("add description")
    addressid String?  @default("address")
    pageid String?    @default("create page")
    type String? @default("unknone ")
  }

model Skill{
    id String @unique @default(uuid())
    userid String 
    certificate  String?  @default("add Certificate")
    userskill Profile @relation(fields: [userid],references: [id])
    
  }
 model connection {
    id BigInt @unique @default(autoincrement())
    senderid String 
    receiverid String
    ismutual Boolean? @default(false)
  }
model Posts{
  id String @default(uuid()) @unique 
  profileid String 
  description String? @default("no description")
  title String? @default("no title")
  data String? @default("no the post data")
  likes Like[]
  createdAt DateTime @default(now())
  comments Comments[]  
}
 model Like{
    id String @unique @default(uuid())
    postid String 
    userid String
    type String? @default("tumbsup")
    like Posts @relation(fields: [postid],references: [id])
    
}
model Comments {
  id String @unique @default(uuid())
  postid String 
  userid String
  description String 
  createdAt DateTime @default(now())
  replays Replay[]
  liked commentLike[]
  comment Posts @relation(fields: [postid],references: [id])
}
model commentLike{
    id String @unique @default(uuid())
    commentid String
    userid String
    type String? @default("tumbsup")
    commentlike Comments @relation(fields: [commentid],references: [id])
}
model Replay{
  id String @unique @default(uuid())
  commentid String 
  description  String 
  userid String 
  createdAt DateTime @default(now())
  replay Comments @relation(fields: [commentid],references: [id])
}
  

