generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  uid                String    @unique @default(uuid())
  email              String    @unique
  password           String
  jsontoken          String?   @default("need token")
  restPasswordTocken String?
  restPasswordExpire DateTime?
  createdAt          DateTime  @default(now())
  type               String?
  plans              UserPlan[] 
}

model Profile {
  id             String          @id @unique @default(uuid())
  firstName      String?         @default("add a firstname")
  lastName       String?         @default("add a lastname")
  userid         String          @unique
  profilepic     String          @default("file/defaultImage.jpg")
  mobileNumber   String?         @unique
  description    String?         @default("provide description")
  tagDescription String?         @default("provide short description")
  addressid      String
  backgroundpic  String          @default("file/defaultBackgorund.jpg")
  premium        Boolean         @default(false)
  viewer         Viewer[]        @relation("viewer")
  viewed         Viewer[]        @relation("viewed")  
  activity       Activity[]
  posts          Posts[]
  skills         Skill[]
  companys       UserCompany[]
  usereducation  UserEducation[]
  following      Page[]
  hashtags       Hashtag[]  
  followedAds    advertisement[]        
 
}

model Viewer{
  id Int  @id @default(autoincrement())
  profileid String 
  viewerid  String
  viewedAt  DateTime 
  viewer Profile @relation("viewer",fields: [profileid],references: [id]) 
  viewed Profile @relation("viewed",fields: [viewerid],references: [id])



}

model UserEducation {
  profileid     String
  course        String
  institutionid String
  description   String?     @default("add description ")
  startDate     DateTime?
  endDate       DateTime?
  persentage    String?     @default("add your percentage")
  student       Institution @relation(fields: [institutionid], references: [id])
  useredu       Profile     @relation(fields: [profileid], references: [id])

  @@id([profileid, institutionid])
}

model Institution {
  id          String          @id @unique @default(uuid())
  name        String
  createdAt   DateTime        @default(now())
  instituteId String          @unique
  description String?         @default("add description ")
  addressid   String?         @default("add address")
  pageid      String?         @default("add a page")
  students    UserEducation[]
}

model UserCompany {
  profileid   String
  position    String
  companyid   String
  description String?   @default("add description")
  startDate   DateTime?
  endDate     DateTime?
  Domain      String?   @default("please provide Domain")
  company     Company   @relation(fields: [companyid], references: [id])
  usercompany Profile   @relation(fields: [profileid], references: [id])

  @@id([profileid, companyid])
}

model Company {
  id          String        @id @unique @default(uuid())
  name        String
  createdAt   DateTime      @default(now())
  companyid   String        @unique
  description String?       @default("add description")
  addressid   String?       @default("address")
  pageid      String?       @default("create page")
  type        String?       @default("unknone ")
  company     UserCompany[]
  advertisements advertisement[]  
}

model Skill {
  id          String  @id @unique @default(uuid())
  name        String
  userid      String
  certificate String? @default("add Certificate")
  description String?
  userskill   Profile @relation(fields: [userid], references: [id])
}

model connection {
  id         String   @id @unique @default(uuid())
  senderid   String
  receiverid String  
  ismutual   Boolean? @default(false)

  
}

model Posts {
  id          String     @id @unique @default(uuid())
  profileid   String
  description String?    @default("no description")
  title       String?    @default("no title")
  data        String?    @default("no the post data")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  pageid      String
  newsid      Int
  pagepost    Page       @relation(fields: [pageid], references: [id])
  userpost    Profile    @relation(fields: [profileid], references: [id])
  newspost    News       @relation(fields: [newsid],references: [id])
  comments    Comments[]
  likes       Like[]
  hashtag     Hashtag[]
}

model Like {
  id     String  @id @unique @default(uuid())
  postid String
  userid String
  type   String? @default("tumbsup")
  like   Posts   @relation(fields: [postid], references: [id])
}

model Comments {
  id          String        @id @unique @default(uuid())
  postid      String
  userid      String
  description String
  createdAt   DateTime      @default(now())
  comment     Posts         @relation(fields: [postid], references: [id])
  replays     Replay[]
  liked       commentLike[]
}

model commentLike {
  id          String   @id @unique @default(uuid())
  commentid   String
  userid      String
  type        String?  @default("tumbsup")
  commentlike Comments @relation(fields: [commentid], references: [id])
}

model Replay {
  id          String   @id @unique @default(uuid())
  commentid   String
  description String
  userid      String
  createdAt   DateTime @default(now())
  replay      Comments @relation(fields: [commentid], references: [id])
}

model verification {
  id         String @id @unique @default(uuid())
  token      String
  email      String @unique
  expiretime Int
}

model Address {
  id      String @id @unique @default(uuid())
  city    String
  state   String
  country String
}

model Page {
  id          String       @id @unique @default(uuid())
  belongsto   String       @unique
  title       String?      @default("set a title")
  websitelink String?
  logpic      String?      @default("file/defaultlog0")
  description String?      @default("add description")
  pagetype    String
  createdAt   DateTime     @default(now())
  viewed      Int          @default(1)
  pageAccess  PageAccess[]
  posts       Posts[]
  followers   Profile[]
}

model PageAccess {
  id        String @id @default(uuid())
  userid    String
  pageid    String
  role      String
  pageAcess Page   @relation(fields: [pageid], references: [id])
}

model Message {
  id           String  @id @unique @default(uuid())
  connectionid String?  
  senderid     String
  receiverid   String
  message      String?
  content      String?
  postid       String?
  createdAt    DateTime  @default(now())
}

model Activity {
  id           String   @id @unique @default(uuid())
  userid       String
  type         String
  message      String
  createdAt    DateTime @default(now())
  targetid     String
  useractivity Profile  @relation(fields: [userid], references: [id])
}

model Plans {
  id String  @id @default(uuid())
  name String @unique
  price Decimal 
  discount Decimal? @default(0)
  valdity Int   @default(30)
  users   UserPlan[]
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}

model UserPlan {
  id       String @id  @default(uuid())
  userid   String 
  planid   String
  planstatus   PlanStatus
  startedAt DateTime @default(now())
  endsAt   DateTime? 
  user     Users @relation(fields: [userid],references: [uid])
  plan     Plans @relation(fields: [planid],references: [id])
  
}
model transaction{
  userid   String
  planid   String 
  amount   Decimal? 
  transactionid  String @id
  status   String? 
  createdAt DateTime  @default(now()) 
  paymentMethod  String?
}
model News{
  id   Int @id @default(autoincrement())
  title String 
  doneBy String 
  newsDetail String @db.VarChar(500)
  posts  Posts[]
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt 
  readers Int @default(0)
}
model Hashtag {
  id Int @id @default(autoincrement())
  tag String @unique
  posts Posts[]
  createdAt DateTime @default(now())
  upadateAt DateTime @updatedAt
  following Profile[]
}
model advertisement {
  id Int @id @default(autoincrement())
  advertisemenLogo String?
  title String?
  type  String?
  about String
  followers Profile[]
  companyid String
  company Company @relation(fields: [companyid],references: [id])
  records adsControll?  
  
}
model adsControll{
  id Int @id @default(autoincrement())
  advertismentId advertisement @relation(fields: [id],references: [id])
  displayed Int   @default(0)
  viewed    Int   @default(0)
  createdAt DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  
}

//enum values 
enum PlanStatus {
  ACTIVE
  EXPIRE 
}

